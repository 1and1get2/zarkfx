ZarkFX的设计思想与目标
======================


整合js行为，放任设计与样式
--------------------------

网络上有许多不错的js库，它们有些是处理行为的，比如用于复制文本到粘贴板的ZeroClipboard.js，而有些是即处理行为又处理样式的，比如jqueryui中的日期选择弹出框。

ZarkFX主要目标是收集这些插件的行为部分，而不限制网页设计与样式的部分，让开发者充分发挥想象力，因为我们认为，行为往往是可复用的(比如验证email，图片轮流切换等)，而样式是随着项目的不同需求千变万化的，只有通过减少重复的编程劳动，才能让一个又一个的设计想法快速变成现实中的作品。

因此，如果某个js库绑定了既定的样式且不可更改时(比如某些图片展示插件)，那么是不会被收录近ZarkFX的。

当一个已有js库已经很好用时，就可以通过fx文件修改调用接口的方式把它吸收为ZarkFX的一部分。当然也可以完全原创fx，这时就不需要依赖第三方js库。



统一文档与调用接口
------------------

无论是否拥有编程开发经验，阅读各种js库的文档恐怕都是一件费力又耗时的事情，特别是这个js库使用频率很低的时候。

开发者的时间越来越宝贵，如果能够阅读格式统一、调用方式统一、甚至命名规则都统一的接口文档，那么就能提高开发者的生产效率。

因此ZarkFX不但要汇集优秀的js库，还要了解它们的接口，整理成ZarkFX自己的文档格式，让使用者快速查阅，快速使用。



提供在线演示
------------

很多优秀的js库都会有在线的demo演示，ZarkFX也不例外，对于每个fx会有一个单独的文档与演示页面，读者可以通过在线演示先快速了解一个fx的常用功能，然后再浏览完整的参数列表。

所以这些在线演示不能代表某个fx的所有功能，它们只是最常用的用法而已。



提供多种样式选择
------------------

虽然ZarkFX的fx样式与行为分离，但不代表fx没有样式。相反，如果能够提供一些默认样式供开发者选择的话，通常能提高开发效率。

当样式并不重要而开发者只关注功能时(比如后台的日期弹出选择框)，提供一个默认的样式就足够开发者使用了。且有时就算默认样式不能满足需求，但能提供一个默认样式的话就能让开发者先勉强使用，能继续专注于当前工作，把样式问题留在后面解决，这对于团队合作的情况特别有用。

如果fx有样式，那么由style参数指定，当style的默认值为"default"时表示使用默认样式，为"none"时表示默认情况下不使用任何样式。

你也可以为已有fx编写新的样式，只需把css以及image文件放到一个文件夹中提交给我们即可，文件夹的名称与主css文件名即表示style参数的值。


任意两个fx之间零相交
---------------------------

任意两个fx之间是不能有任何假设或依赖关系的，比如说fx1中假设了fx2的存在，或者fx1引用了fx2等，这些在ZarkFX中是不允许存在的。

这样做是为了：
1、尽量避免在混合使用多个fx时不会产生冲突以及其它bug；
2、降低fx的学习和维护成本，让每一个fx都可以单独存在和使用；
3、把新fx的开发难度与成本降到最低，只要懂点js编程，任何人都可以为ZarkFX做贡献。



有些fx可以在同一个元素上反复使用
--------------------------------

比如用来验证浏览器端输入的validation fx来举例，有时我们希望同时对一个input输入框做出多个约束(比如长度不能超过20个字符，且必须都是字母和数字)，那么就可以组合使用多个validation来达到目的。

所以开发者可以按照自己的想法任意组合fx，以满足复杂的需求，但是注意各个fx之间是没有先后顺序的，因此谁写在前面谁写在后面这个没有特别的要求。



fx文档与js代码在一起
----------------------

每一个fx都有一个对应的js文件存放在zarkfx/fx文件夹下，而每个fx的文档以js注释的形式与fx代码整合在一个文件中。开发者也可以直接打开源文件查看各个fx的使用文档。

fx的文档使用了reStructuredText文档格式，如果你想为ZarkFX编写新的fx，那么提供完善的文档也是必须的。


目前存在的问题
--------------

毕竟ZarkFX还是一个新鲜事物，我们刚把它推向大众接受各位开发者的检验，有一些已知问题待解决，它们有：

1、加载js文件过多。一个页面中只要出现一种fx的调用就会加载对应的js文件，如果一个页面中使用了太多种类的fx，那么就会加载许多js文件，这有可能让网页看起来变慢。

2、各个fx依赖的jquery版本不一致。有时，这会引起可能加载2个版本以上的jquery库，虽然不会有bug，但是同样浪费了带宽资源。不过幸好的是，这个问题相对比较容易解决。

3、某些特殊情况会有bug。通常这是被使用的第三方js库自带的，另外第三方js库之间本身可能会有冲突，不过遇到这种情况的概率还是比较低的。

相信随着ZarkFX的发展，总会产生一些新的问题，但这些问题总是会被解决的，大多数情况下都能如我们所愿用于正式项目。


为ZarkFX贡献代码
----------------

我们Sparker5团队虽然创建了这个ZarkFX项目，但我们从来没有想过要自己完善所有的fx，我们需要各位开发者的力量，共同完善它。

ZarkFX的主要开发工作可以分为两个部分，分别是：

1、完善zarkfx.js的基础功能，比如参数解析，全局参数定义，以及以后的更多高级功能。这部分工作主要由我们团队来编写。

2、完善各个fx子文件，这包含第三方js库接口分析、转为ZarkFX的调用方式，或不依赖任何第三方库的原创fx，以及文档的完善。这部分工作主要通过社区的力量来完成。

如果你有兴趣，可以写好新fx后在github上发起Pull Request, 并给我发一封说明邮件，我的邮箱是SDJLLYH的gmail.com

如果你想参与ZarkFX的开发但是又不知道可以写点什么，那么给我发邮件吧，我给你布置作业:)


豆瓣讨论小组
------------

有其它想说的话，来我们的豆瓣小组讨论吧: `Sparker5的豆瓣讨论小组 <http://www.douban.com/group/sparker5/>`_ 

