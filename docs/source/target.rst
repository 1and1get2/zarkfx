ZarkFX的设计与目标
======================

我想，任何一个刚听说ZarkFX的人都会有一个共同的疑问，那就是它和其它“类似”项目有什么区别？已经有很多功能强大的项目了，为什么我还需要ZarkFX？

对于这个问题，目前我还不能用一两句话来概括，我只能通过在实际使用中得出来的务实经验，一点一点地描述它与其它库的不同之处。


易传播优先于功能多
--------------------------

虽然，功能多是很重要，ZarkFX也计划不断增加新的fx来让自己变得更强大。但是对于ZarkFX来说，当必须在易传播性与功能多之间做出选择时，ZarkFX会选择前者。

比如说，在以下情况下，易传播性会被优先考虑：

1、当可以为某个fx添加新的功能让此fx变得更强大、能够处理更多复杂需求，但是不得不让接口(参数)调用变得更复杂时(比如提供了更多的交叉选择)，ZarkFX宁可选择放弃这个功能，而保持接口容易被理解，调用更快捷。

2、当可以“优化”代码让程序跑得更快、提高性能，但代码变得更难以理解和阅读、修改时，ZarkFX宁可选择容易被阅读和修改。

3、当ZarkFX可以变得更强大，但用户不得不为此多付出一点学习成本时，ZarkFX宁可选择让用户啥也别学。除非这个学习是自愿可选的。

4、在不违反这个原则的前提下，ZarkFX会朝着功能更多，使用更广泛的目标发展，尽量覆盖那些使用概率较高的js功能。

大多数js库功能再牛逼，也逃不过编程界的束缚，ZarkFX不和它们比较。

减少学习和沟通成本
--------------------------

毕竟，有些人是不愿意学习编程，也不经常需要用到编程的。对于这一部分人ZarkFX比起其它"类似"库就有了天然的优势，不需要懂编程！

当ZarkFX用于团队合作中时，它还能降低整个团队的沟通和互相等待的成本。比如说，有人会写css(相信很多设计师学习css并非难事)但不擅长js，那么他就需要等待别人完善js功能后继续下一步工作，如果能他自己搞定绝大多数本该js完成的功能，那么就能提高生产力。

我们认为重复的编写同样功能的js代码只是在浪费生命，不得不学习一堆只用一次就忘记的编程知识也是不划算的，你应该把时间放到真正的创作中去。



命令性思维到描述性思维的转变
-----------------------------

ZarkFX为什么能减少开发者的学习成本？最容易观察到的一点就是，ZarkFX是描述性的，而不是命令性的。

CSS是描述性的，设计师学习CSS没有太大的难度，但是当遇到逻辑推理的时候就困难了。对程序员来说也许你已经习惯了逻辑性思维，但是在编程界之外，还有许多不擅长逻辑思维的同学与我们共事，开发对于他们就好比对于我们同样重要。

ZarkFX牺牲了适应特殊需求的灵活性，让思维逃离逻辑，换取了时间。 但是，这个牺牲只是暂时的。


动态生成fx配置
-----------------------------

js变成描述性的另一个显而易见的好处就是，fx配置可以通过程序动态生成。

你想编写一个让用户通过简单配置就能生成多种js行为组合的“动态行为”页面？ZarkFX让你用连接字符串的力气完成此事。


整合js行为，放任设计与样式
--------------------------

网络上有许多不错的js库，它们有些是处理行为的，比如用于复制文本到粘贴板的ZeroClipboard.js，而有些是即处理行为又处理样式的，比如jqueryui中的日期选择弹出框。

ZarkFX主要目标是收集这些插件的行为部分，而不限制网页设计与样式的部分，让开发者充分发挥想象力，因为我们认为，行为往往是可复用的(比如验证email，图片轮流切换等)，而样式是随着项目的不同需求千变万化的，只有通过减少重复的编程劳动，才能让一个又一个的设计想法快速变成现实中的作品。

因此，如果某个js库绑定了既定的样式且不可更改时(比如某些图片展示插件)，那么是不会被收录近ZarkFX的。

当一个已有js库已经很好用时，就可以通过fx文件修改调用接口的方式把它吸收为ZarkFX的一部分。当然也可以完全原创fx，这时就不需要依赖第三方js库。



统一文档与调用接口
------------------

无论是否拥有编程开发经验，阅读各种js库的文档恐怕都是一件费力又耗时的事情，特别是这个js库使用频率很低的时候。

开发者的时间越来越宝贵，如果能够阅读格式统一、调用方式统一、甚至命名规则都统一的接口文档，那么就能提高开发者的生产效率。

因此ZarkFX不但要汇集优秀的js库，还要了解它们的接口，整理成ZarkFX自己的文档格式，让使用者快速查阅，快速使用。



提供在线演示
------------

很多优秀的js库都会有在线的demo演示，ZarkFX也不例外，对于每个fx会有一个单独的文档与演示页面，读者可以通过在线演示先快速了解一个fx的常用功能，然后再浏览完整的参数列表。

所以这些在线演示不能代表某个fx的所有功能，它们只是最常用的用法而已。



提供多种样式选择
------------------

虽然ZarkFX的fx样式与行为分离，但不代表fx没有样式。相反，如果能够提供一些默认样式供开发者选择的话，通常能提高开发效率。

当样式并不重要而开发者只关注功能时(比如后台的日期弹出选择框)，提供一个默认的样式就足够开发者使用了。且有时就算默认样式不能满足需求，但能提供一个默认样式的话就能让开发者先勉强使用，能继续专注于当前工作，把样式问题留在后面解决，这对于团队合作的情况特别有用。

如果fx有样式，那么由style参数指定，当style的默认值为"default"时表示使用默认样式，为"none"时表示默认情况下不使用任何样式。

你也可以为已有fx编写新的样式，只需把css以及image文件放到一个文件夹中提交给我们即可，文件夹的名称与主css文件名即表示style参数的值。


任意两个fx之间零相交
---------------------------

任意两个fx之间是不能有任何假设或依赖关系的，比如说fx1中假设了fx2的存在，或者fx1引用了fx2等，这些在ZarkFX中是不允许存在的。

这样做是为了：
1、尽量避免在混合使用多个fx时不会产生冲突以及其它bug；
2、降低fx的学习和维护成本，让每一个fx都可以单独存在和使用；
3、把新fx的开发难度与成本降到最低，只要懂点js编程，任何人都可以为ZarkFX做贡献。
4、降低整体复杂度，任何一个fx不想要了，删除就可以了，不会对其它部分有任何影响。


就算变得再臃肿，也不会增加复杂度，更不会影响性能
------------------------------------------------

从上面一点可以看出，ZarkFX和其它的js库在结构上有一个明显的区别，那就是ZarkFX是由一个zarkfx.js主文件以及一堆fx子文件构成的，而各个fx子文件之间是不会有交叉的。

假如有一天，ZarkFX收集了200个fx子文件，也不会大幅度增加整个项目的复杂度，也不会影响任何一个fx的性能，更不会增加学习成本和使用门槛。因为每一个fx无论在设计上、使用上还是文档上都是互相独立的。

只要有一个主文件zarkfx.js，再加上其它任何一小部分fx都可以单独存在和使用。



有些fx可以在同一个元素上反复使用
--------------------------------

比如用来验证浏览器端输入的validation fx来举例，有时我们希望同时对一个input输入框做出多个约束(比如长度不能超过20个字符，且必须都是字母和数字)，那么就可以组合使用多个validation来达到目的。

所以开发者可以按照自己的想法任意组合fx，以满足复杂的需求，但是注意各个fx之间是没有先后顺序的，因此谁写在前面谁写在后面这个没有特别的要求。



fx文档与js代码在一起
----------------------

每一个fx都有一个对应的js文件存放在zarkfx/fx文件夹下，而每个fx的文档以js注释的形式与fx代码整合在一个文件中。开发者也可以直接打开源文件查看各个fx的使用文档。

fx的文档使用了reStructuredText文档格式，如果你想为ZarkFX编写新的fx，那么提供完善的文档也是必须的。


目前存在的问题
--------------

毕竟ZarkFX还是一个新鲜事物，我们刚把它推向大众接受各位开发者的检验，有一些已知问题待解决，它们有：

1、加载js文件过多。一个页面中只要出现一种fx的调用就会加载对应的js文件，如果一个页面中使用了太多种类的fx，那么就会加载许多js文件，这有可能让网页看起来变慢。

2、各个fx依赖的jquery版本不一致。有时，这会引起可能加载2个版本以上的jquery库，虽然不会有bug，但是同样浪费了带宽资源。不过幸好的是，这个问题相对比较容易解决。

3、某些特殊情况会有bug。通常这是被使用的第三方js库自带的，另外第三方js库之间本身可能会有冲突，不过遇到这种情况的概率还是比较低的。

相信随着ZarkFX的发展，总会产生一些新的问题，但这些问题总是会被解决的，大多数情况下都能如我们所愿用于正式项目。


计划要开发的功能
----------------

目前已经有约35个fx，它们已经多次用于我们的现有项目，但是还达不到发布v0.1版本的要求，有些是需要重构的，大多数都是等着完善文档的，还有一些是考虑去掉的。等它们都完成优化后就会对外发布v0.1版本。然后目前计划在发布v0.1之后增加以下功能:

1、增加通过js控制fx效果的功能，比如可以通过类似fx('#id').scroll(obj)来控制滚动效果的fx滚动屏幕到obj元素的位置。可以理解为给fx添加函数调用的方式。

2、添加查看页面中fx配置的功能。比如有人用ZarkFX在某个页面中实现了一个不错的功能，你眼红，想要，怎么办？

你可以按下某个键盘上的按键，然后页面上配置了fx的元素就会多出一个小图标，你移上去就可以看到他的配置表，点击复制就可以用于你的项目了。

3、添加复制别人的fx的功能。如果上面所说的那个fx是别人自己写的不包含在发布包中的呢？那你可以点击另一个图标，ZarkFX会为你去下载他的fx以及样式，通过某种“下载程序”就可以导入你自己的fx工具箱中了。当然，更常见的情况可能是，你仅copy了他的新样式。

以上功能只是可能，以后的事情恐怕还是等到以后再说:)


ZarkFX不会有的功能
--------------------

知道ZarkFX将不会有哪些功能对理解ZarkFX也是很重要的，这里举一些例子：

1、除fx以外，不会增加第二个html属性。

2、除HTML标准标签以外，不增加、不使用任何其它标签。

3、除了jquery与zarkfx.js以外，不依赖、不加载任何第三个js文件(由js代码自己加载的除外)。



为ZarkFX贡献代码
----------------

我们Sparker5团队虽然创建了这个ZarkFX项目，但我们从来没有想过要自己完善所有的fx，我们需要各位开发者的力量，共同完善它。

ZarkFX的主要开发工作可以分为两个部分，分别是：

1、完善zarkfx.js的基础功能，比如参数解析，全局参数定义，以及以后的更多高级功能。这部分工作主要由我们团队来编写。

2、完善各个fx子文件，这包含第三方js库接口分析、转为ZarkFX的调用方式，或不依赖任何第三方库的原创fx，以及文档的完善。这部分工作主要通过社区的力量来完成。

如果你有兴趣，可以写好新fx后在github上发起Pull Request, 并给我发一封说明邮件，我的邮箱是SDJLLYH的gmail.com

如果你想参与ZarkFX的开发但是又不知道可以写点什么，那么给我发邮件吧。


豆瓣讨论小组
------------

有其它想说的话，来我们的豆瓣小组讨论吧: `Sparker5的豆瓣讨论小组 <http://www.douban.com/group/sparker5/>`_ 

