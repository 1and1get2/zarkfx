创建新的fx
==========

文件命名规则
------------

1、每个fx文件都放到zarkfx/fx/目录里，文件名以小写字母构成，不能有下划线或其它符号字符。

2、如果fx主要使用了第三方库来完成某项任务，那就以第三方库的名称命名，比如cycle.js，autocomplete.js等。一来这样容易让有经验的用户一眼就能看出fx的用途，二来也是对原作者的尊重。

3、如果fx引用了第三方库，那么把第三方库的js文件放到zarkfx/static/js/目录里，并与已有文件保持类似的命名方式。


fx文件结构
--------------

通常，一个fx文件大概由以下结构构成:


FX.getFrame('jquery-1.3.2', function($){

    FX.run('your_fx_name', function(attrs){
        // add your code

    }, {            
        p1       : v1,
        p2       : v2

    }, 'jqueryui-1.8.14');

});

其中，getFrame有两个参数，第一个是你需要使用的jquery版本(当然也可以是别的基础库)，第二个参数是加载完jquery后运行的回调函数，你也可以在第二个参数中添加一些预处理代码，然后调用FX.run。

FX.run会找到使用了某fx的相关html元素，然后对它们依次运行FX.run第二个参数指定的回调函数，在html中配置的参数值便会被解析为一个字典作为attrs传给此回调函数。

回调函数中可用关键字"this"引用当前html元素。

FX.run的第三个参数为attrs的默认值，如果没有默认值就为空字典"{}"即可。

FX.run的第四个参数为第三方依依赖库，当有多个依赖库时需写成列表"[js1, js2, ...]"的形式。

这里需要注意的是，放在zarkfx/static/js/里的第三方依赖库，如果也使用了jquery的话，那么需要给它们包一层 FX.getFrame 代码并指定相同的jquery版本号，以保证两个"$"指向的是同一个jquery对象，可以参考已有代码。

另外需要注意的是，除非不得已，否则不能使用全局变量。


参数命名规则
--------------

1、参数使用首单词全部小写、第二个单词起首字母大写的形式，不使用下划线。

2、参数值使用全部小写、单词之间用下划线风格的形式。参数值可以使用空格，表示多个值，但空格的数量是任意的。

3、必选参数需给出默认值，zarkfx.js会根据默认值的数据类型修改实际参数值的类型，比如参数d的默认值为0，那么"abc[d=5]"的d被解析为整数5，而不是字符串'5'。



除了style，不能有第二个与样式有关的参数
---------------------------------------

前面说到，可以使用style选择样式，但是除此之外，不能有其它参数参与到样式中来。

比如，使用了某个参数来修改样式中的元素宽度？或指定引用某张图片？这些都是不可以的。

但是使用参数决定某个元素或者图片是否显示，这是可以有的。

这样做是为了可以把新样式的设计完全从程序中分离出来，降低开发新样式的技术门槛，方便样式单独传播。


为fx创建样式
---------------

如果要为fx创建新的样式，那么把此样式用到的所有css、img文件都放到zarkfx/static/css/fx_name/style_name目录下，且主样式的css文件名要和文件夹名称一致(在这里用style_name表示)，然后通过style=style_name的方式引用。

任何一个样式都不能引用样式文件夹之外的其它任何文件，要做到复制此文件夹即可得到此样式。

约定使用style='default'表示默认情况下使用默认样式，用style='none'表示默认情况下不使用任何样式。


为fx编写文档
----------------

最后一个重要的任务，就是为fx编写文档了，可以参考现有文档的写法，主要完成以下几点:

1、fx说明，请主动写明你的姓名、blog等都可以，如果引用了第三方库，要明确指出，并给出第三方库的网址。

2、参数列表，每个参数需要有以下内容：参数名， 默认值， 是否必须，说明， 参数取值范围， 样例及演示连接(跳转到本页面的某个demo)，如果有的话。

3、演示样例，这个具体就参考已有文档吧。
